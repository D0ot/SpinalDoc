--------------------
Types
Bool
Bits/UInt/SInt([X bit])
Vec(dataType:Data,size:Int)
--------------------
Literals
Bool(value)
True False
B/U/S(value:Int[,x bit])
B/U/S"0100"
--------------------
Assignement
x := y
x <> y
--------------------
Operator
Bool
!x
x && y
x || y
x === y
x =/= y


UInt/SInt
x + y
x - y
x * y
x > y
x >= y
x < y
x <= y

Bits/UInt/SInt
~x
x & y
x | y
x ^ y
x === y
x =/= y
x >> y
x << y

Bool/Bits/UInt/SInt/Vec/Bundle
x ## y
--------------------
Cast
Bool.asBits/asUInt/asSInt
Bits.asBool/asUInt/asSInt
UInt.asBool/asBits/asSInt
SInt.asBool/asBits/asUInt
--------------------
Conditional

when(cond1){
  //execute when      cond1 is true
}.elsewhen(cond2){
  //execute when (not cond1) and cond2
}.otherwise{
  //execute when (not cond1) and (not cond2)
}

switch(x){
  is(value1){
    //execute when x === value1
  }
  is(value2){
    //execute when x === value2
  }
  default{
    //execute if none of precedent condition meet
  }
}
--------------------
Component
class Counter(width : Int) extend Component{
  val io = new Bundle{
    val clear = in Bool
    val value = out UInt(width bit)
  }
  val register = Reg(UInt(width bit)) init(0)
  register := register + 1
  when(io.clear){
    register := 0
  }
  io.value := register
}

val myCounter = new Counter(4)
myCounter.io.clear := myCounter.io.value === 9
--------------------

--------------------
--------------------
--------------------